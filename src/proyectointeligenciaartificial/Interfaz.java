package proyectointeligenciaartificial;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import javax.swing.ButtonGroup;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 * @author Pablo-PC
 */
public class Interfaz extends javax.swing.JFrame {

    private ButtonGroup bg;
    private ArrayList<String> datos  = new ArrayList();
    private ArrayList<String> memoria  = new ArrayList();
    private String[][] condicion;
    private int cont1 = 0, cont2 = 0;
    private String dir;
    Metodos me = new Metodos();
    
    public Interfaz() {
        initComponents();
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        radios();
    }
    
    void radios(){
        bg = new ButtonGroup();
        bg.add(rbnEncadenamientoAdelante);
        bg.add(rbnEncadenamientoAtras);
    }
    
    void llenarMatriz(){
        int tamanioDoc = 0;
        tamanioDoc = me.tamanioDoc(dir);
        condicion = new String[tamanioDoc][15];
        
        for (int i = 0; i < tamanioDoc; i++) {
            for (int j = 0; j < 15; j++) {
                condicion[i][j] = "";
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtHipotesis = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnProcesar = new javax.swing.JButton();
        btnBorrarMem = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        rbnEncadenamientoAdelante = new javax.swing.JRadioButton();
        rbnEncadenamientoAtras = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        btnProcesarIpotesis = new javax.swing.JButton();
        btnProcesarMemoria = new javax.swing.JButton();
        list1 = new java.awt.List();
        list2 = new java.awt.List();
        list3 = new java.awt.List();
        jMenuBar1 = new javax.swing.JMenuBar();
        jmArchivo = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel3.setText("Hipótesis a verificar");

        jLabel4.setText("Memoria de trabajo");

        btnProcesar.setText("Procesar");
        btnProcesar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcesarActionPerformed(evt);
            }
        });

        btnBorrarMem.setText("Borrar mem");
        btnBorrarMem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarMemActionPerformed(evt);
            }
        });

        jLabel5.setText("Generador de explicaciones");

        jLabel1.setText("Inferencia:");

        rbnEncadenamientoAdelante.setSelected(true);
        rbnEncadenamientoAdelante.setText("Encadenamiento hacia adelante");

        rbnEncadenamientoAtras.setText("Encadenamiento hacia atras");

        jLabel2.setText("Instancias de las reglas de producción");

        btnProcesarIpotesis.setText(">>");
        btnProcesarIpotesis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcesarIpotesisActionPerformed(evt);
            }
        });

        btnProcesarMemoria.setText(">>");
        btnProcesarMemoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcesarMemoriaActionPerformed(evt);
            }
        });

        jmArchivo.setText("Archivo");

        jMenuItem1.setText("Abrir archivo txt");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jmArchivo.add(jMenuItem1);

        jMenuBar1.add(jmArchivo);

        jMenu2.setText("Acerca de");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(list1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rbnEncadenamientoAdelante))
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnProcesarIpotesis)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel4)
                                            .addComponent(txtHipotesis, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnProcesarMemoria)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(btnProcesar)
                                                .addGap(18, 18, 18)
                                                .addComponent(btnBorrarMem))
                                            .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(list2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                    .addComponent(rbnEncadenamientoAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(27, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(list3, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbnEncadenamientoAdelante)
                    .addComponent(rbnEncadenamientoAtras))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnProcesarIpotesis)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(txtHipotesis)))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addComponent(btnProcesarMemoria)
                                .addGap(118, 118, 118))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(list2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(10, 10, 10))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(list1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnProcesar)
                    .addComponent(btnBorrarMem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(list3, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        String aux, aux1="", aux2 = "", aux3 = "";
        int contador = 0, contador2 = 0,concurrencias=0;
        dir = "";
        
        try{
         JFileChooser file=new JFileChooser();
         file.showOpenDialog(this);
         File abre=file.getSelectedFile();
         dir = abre.getPath();
                 
         if(abre!=null){    
            FileReader archivos=new FileReader(abre);
            BufferedReader lee=new BufferedReader(archivos);
            llenarMatriz();
            
            while((aux=lee.readLine())!=null){
                aux1 = aux.substring(aux.indexOf("SI ")+3, aux.indexOf(" ENTONCES"));//Se guarda la cadena del empezando del 'SI' hasta antes del entonces
                aux2 = aux1;
                //Con este cicloo se busca si contiene Y dentro de la cadena y cuenta cuantas tiene
                while (aux2.indexOf(" Y ")  > -1) {
                    aux2 = aux2.substring(aux2.indexOf(" Y ")+(" Y ").length(),aux2.length());
                    contador++;
                }
                    //Si no encuentra la letra entonces imprime y guarda la cadena
                    if(aux1.indexOf(" Y ") == -1){
                        datos.add(aux1);
                        condicion[cont1][cont2] = aux1;
                        cont2++;
                    }else{
                        //Si encuentra una sola Y entonces separa en dos partes la cadena y las manda al metodo existeOU
                        if(contador == 1){
                            existeOU(aux1.substring(aux1.indexOf(""), aux1.indexOf(" Y ")));
                            existeOU(aux1.substring(aux1.indexOf(" Y ")+3));
                         //Si existen mas de una Y entonces entra a un ciclo, separa y va borrando cada condicion que ya va siendo separada
                        }else if(contador > 1){
                            aux3 = aux1;
                            do{
                                existeOU(aux3.substring(aux3.indexOf(""), aux3.indexOf(" Y ")));
                                aux3 = aux3.substring(aux3.indexOf(" Y ")+3);
                                contador--;
                            }while(contador > 1);
                            existeOU(aux3.substring(aux3.indexOf(""), aux3.indexOf(" Y ")));
                            existeOU(aux3.substring(aux3.indexOf(" Y ")+3));
                        }
                    }
                 //Al final se imprime la ultima cadena en la ultima posicion de la matriz
                 datos.add(aux.substring(aux.indexOf("ENTONCES ")+9));
                 condicion[cont1][14] = aux.substring(aux.indexOf("ENTONCES ")+9);
                 cont2 = 0;
                 cont1++;
                contador = 0;
            }
               lee.close();
          }
         eliminarRepetidos();
         mostraM();
         }catch(IOException ex){
           JOptionPane.showMessageDialog(null,ex+ "\nNo se ha encontrado el archivo","ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);
          }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void btnProcesarIpotesisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcesarIpotesisActionPerformed
        if(list1.getSelectedItem() != null){
            txtHipotesis.setText(list1.getSelectedItem());
        }else{
            JOptionPane.showMessageDialog(null, "No has seleccionado alguna opción");
        }
    }//GEN-LAST:event_btnProcesarIpotesisActionPerformed

    private void btnProcesarMemoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcesarMemoriaActionPerformed
         if(list1.getSelectedItem() != null){   
            list2.add(list1.getSelectedItem());
            memoria.add(list1.getSelectedItem());
        }else{
            JOptionPane.showMessageDialog(null, "No has seleccionado alguna opción");
        }
    }//GEN-LAST:event_btnProcesarMemoriaActionPerformed

    private void btnProcesarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcesarActionPerformed
        
        if(rbnEncadenamientoAdelante.isSelected() == true){
            if (datos.size() == 0) {
                JOptionPane.showMessageDialog(null, "Por cargue el archivo con las reglas!!", "Error", JOptionPane.ERROR_MESSAGE);
            }else{
                if(memoria.size() == 0){
                    JOptionPane.showMessageDialog(null, "Por favor seleccion la memoria a usar!!", "Error", JOptionPane.ERROR_MESSAGE);
                }else{
                    me.inferencias();
                    me.condicionesPorLinea(condicion);
                    me.encadenamientoHD(memoria, list3, list2);
                }
            }
        }else{
            if (datos.size() == 0) {
                JOptionPane.showMessageDialog(null, "Por cargue el archivo con las reglas!!", "Error", JOptionPane.ERROR_MESSAGE);
            }else{
                if(memoria.size() == 0){
                    JOptionPane.showMessageDialog(null, "Por favor seleccion la memoria a usar!!", "Error", JOptionPane.ERROR_MESSAGE);
                }else{
                    if(!txtHipotesis.getText().equals("")){
                        me.inferencias();
                        me.condicionesPorLinea(condicion);
                        me.encadenamientoHAtras(memoria, txtHipotesis.getText(), list3, list2);
                    }else{
                        JOptionPane.showMessageDialog(null, "Por favor seleccion/escriba la impotesis!!", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }
    }//GEN-LAST:event_btnProcesarActionPerformed

    private void btnBorrarMemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarMemActionPerformed
        list2.clear();
        list3.clear();
        memoria = new ArrayList();
    }//GEN-LAST:event_btnBorrarMemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBorrarMem;
    private javax.swing.JButton btnProcesar;
    private javax.swing.JButton btnProcesarIpotesis;
    private javax.swing.JButton btnProcesarMemoria;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenu jmArchivo;
    private java.awt.List list1;
    private java.awt.List list2;
    private java.awt.List list3;
    private javax.swing.JRadioButton rbnEncadenamientoAdelante;
    private javax.swing.JRadioButton rbnEncadenamientoAtras;
    private javax.swing.JTextField txtHipotesis;
    // End of variables declaration//GEN-END:variables

    public void existeOU(String cadena){
            int contadorM= 0;
            String cadena2 = cadena;
            String cadena3 = "";
            String oU = "";

            if(cadena.indexOf(" O ") == -1 && cadena.indexOf(" U ") == -1){
                  datos.add(cadena);
                  condicion[cont1][cont2] = cadena;
                  cont2++;
            }else{
                if(cadena.indexOf(" O ") != -1){
                    oU = " O ";
                }else{
                    oU = " U ";
                }
                    while (cadena2.indexOf(oU)  > -1) {
                        cadena2 = cadena2.substring(cadena2.indexOf(oU)+(oU).length(),cadena2.length());
                        contadorM++;
                    }
                    if(contadorM == 1){
                        datos.add(cadena.substring(cadena.indexOf(""), cadena.indexOf(oU)));
                        condicion[cont1][cont2] = cadena.substring(cadena.indexOf(""), cadena.indexOf(oU));
                        cont2++;
                        datos.add(cadena.substring(cadena.indexOf(""),cadena.indexOf("=")+1)+""+cadena.substring(cadena.indexOf(oU)+3));
                        condicion[cont1][cont2] = cadena.substring(cadena.indexOf(""),cadena.indexOf("=")+1)+""+cadena.substring(cadena.indexOf(oU)+3);
                        cont2++;
                    }else if(contadorM > 1){
                        datos.add(cadena.substring(cadena.indexOf(""), cadena.indexOf(oU)));
                        condicion[cont1][cont2] = cadena.substring(cadena.indexOf(""), cadena.indexOf(oU));
                        cont2++;
                        cadena3 = cadena.substring(cadena.indexOf(""),cadena.indexOf("=")+1)+cadena.substring(cadena.indexOf(oU)+3);
                        existeOU(cadena3);
                    }
            }
        }

    private void eliminarRepetidos(){
        LinkedHashSet<String> linkedhashSet = new LinkedHashSet<String>(datos);
        datos.clear();
        datos.addAll(linkedhashSet);
        list1.clear();
        for(String cadena : linkedhashSet){
            list1.add(cadena);
        }
    }
    
    public void mostraM(){
        for (int i = 0; i < condicion.length; i++) {
            for (int j = 0; j < condicion[0].length; j++) {
                System.out.print(" \"" + condicion[i][j] + "\" ");
            }
            System.out.println("");
        }
        System.out.println("");
    }
}